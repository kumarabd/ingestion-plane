// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: ingest/v1/ingest.proto

package ingestv1

import (
	v1 "github.com/kumarabd/ingestion-plane/contracts/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Normalized log record emitted by the Pre-Normalizer + PII Redactor.
type NormalizedLog struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Canonical labels to keep cardinality sane; include tenant/service/env/severity.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Canonicalized, redacted message string (what miners see).
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Optional structured fields promoted from json/logfmt (bounded, small).
	Fields map[string]string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Source schema classification for this line.
	Schema v1.Schema `protobuf:"varint,5,opt,name=schema,proto3,enum=common.v1.Schema" json:"schema,omitempty"`
	// Normalized severity (also present in labels).
	Severity v1.Severity `protobuf:"varint,6,opt,name=severity,proto3,enum=common.v1.Severity" json:"severity,omitempty"`
	// True if UTF-8 fixups / sanitization occurred.
	Sanitized bool `protobuf:"varint,7,opt,name=sanitized,proto3" json:"sanitized,omitempty"`
	// Original payload length before truncation.
	OriginalLength uint32 `protobuf:"varint,8,opt,name=original_length,json=originalLength,proto3" json:"original_length,omitempty"`
	// Truncation flag applied during bounds enforcement.
	Truncated bool `protobuf:"varint,9,opt,name=truncated,proto3" json:"truncated,omitempty"`
	// PII redaction report.
	Redaction *RedactionReport `protobuf:"bytes,10,opt,name=redaction,proto3" json:"redaction,omitempty"`
	// Opaque correlation id for tracing across services (optional).
	CorrelationId string `protobuf:"bytes,11,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NormalizedLog) Reset() {
	*x = NormalizedLog{}
	mi := &file_ingest_v1_ingest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalizedLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedLog) ProtoMessage() {}

func (x *NormalizedLog) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_v1_ingest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedLog.ProtoReflect.Descriptor instead.
func (*NormalizedLog) Descriptor() ([]byte, []int) {
	return file_ingest_v1_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *NormalizedLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NormalizedLog) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NormalizedLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NormalizedLog) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *NormalizedLog) GetSchema() v1.Schema {
	if x != nil {
		return x.Schema
	}
	return v1.Schema(0)
}

func (x *NormalizedLog) GetSeverity() v1.Severity {
	if x != nil {
		return x.Severity
	}
	return v1.Severity(0)
}

func (x *NormalizedLog) GetSanitized() bool {
	if x != nil {
		return x.Sanitized
	}
	return false
}

func (x *NormalizedLog) GetOriginalLength() uint32 {
	if x != nil {
		return x.OriginalLength
	}
	return 0
}

func (x *NormalizedLog) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *NormalizedLog) GetRedaction() *RedactionReport {
	if x != nil {
		return x.Redaction
	}
	return nil
}

func (x *NormalizedLog) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

// Redaction metadata for auditing.
type RedactionReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Applied       bool                   `protobuf:"varint,1,opt,name=applied,proto3" json:"applied,omitempty"`
	Rules         []string               `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`  // e.g., ["pii.email","pii.ipv4"]
	Count         uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"` // number of replacements performed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedactionReport) Reset() {
	*x = RedactionReport{}
	mi := &file_ingest_v1_ingest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedactionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactionReport) ProtoMessage() {}

func (x *RedactionReport) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_v1_ingest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactionReport.ProtoReflect.Descriptor instead.
func (*RedactionReport) Descriptor() ([]byte, []int) {
	return file_ingest_v1_ingest_proto_rawDescGZIP(), []int{1}
}

func (x *RedactionReport) GetApplied() bool {
	if x != nil {
		return x.Applied
	}
	return false
}

func (x *RedactionReport) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RedactionReport) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Batch wrapper for efficient ingestion.
type NormalizedLogBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*NormalizedLog       `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NormalizedLogBatch) Reset() {
	*x = NormalizedLogBatch{}
	mi := &file_ingest_v1_ingest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalizedLogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedLogBatch) ProtoMessage() {}

func (x *NormalizedLogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_v1_ingest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedLogBatch.ProtoReflect.Descriptor instead.
func (*NormalizedLogBatch) Descriptor() ([]byte, []int) {
	return file_ingest_v1_ingest_proto_rawDescGZIP(), []int{2}
}

func (x *NormalizedLogBatch) GetRecords() []*NormalizedLog {
	if x != nil {
		return x.Records
	}
	return nil
}

// Simple acknowledgement.
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_ingest_v1_ingest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_v1_ingest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_ingest_v1_ingest_proto_rawDescGZIP(), []int{3}
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_ingest_v1_ingest_proto protoreflect.FileDescriptor

const file_ingest_v1_ingest_proto_rawDesc = "" +
	"\n" +
	"\x16ingest/v1/ingest.proto\x12\tingest.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16common/v1/common.proto\"\xf7\x04\n" +
	"\rNormalizedLog\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12<\n" +
	"\x06labels\x18\x02 \x03(\v2$.ingest.v1.NormalizedLog.LabelsEntryR\x06labels\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12<\n" +
	"\x06fields\x18\x04 \x03(\v2$.ingest.v1.NormalizedLog.FieldsEntryR\x06fields\x12)\n" +
	"\x06schema\x18\x05 \x01(\x0e2\x11.common.v1.SchemaR\x06schema\x12/\n" +
	"\bseverity\x18\x06 \x01(\x0e2\x13.common.v1.SeverityR\bseverity\x12\x1c\n" +
	"\tsanitized\x18\a \x01(\bR\tsanitized\x12'\n" +
	"\x0foriginal_length\x18\b \x01(\rR\x0eoriginalLength\x12\x1c\n" +
	"\ttruncated\x18\t \x01(\bR\ttruncated\x128\n" +
	"\tredaction\x18\n" +
	" \x01(\v2\x1a.ingest.v1.RedactionReportR\tredaction\x12%\n" +
	"\x0ecorrelation_id\x18\v \x01(\tR\rcorrelationId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a9\n" +
	"\vFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"W\n" +
	"\x0fRedactionReport\x12\x18\n" +
	"\aapplied\x18\x01 \x01(\bR\aapplied\x12\x14\n" +
	"\x05rules\x18\x02 \x03(\tR\x05rules\x12\x14\n" +
	"\x05count\x18\x03 \x01(\rR\x05count\"H\n" +
	"\x12NormalizedLogBatch\x122\n" +
	"\arecords\x18\x01 \x03(\v2\x18.ingest.v1.NormalizedLogR\arecords\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2F\n" +
	"\rIngestService\x125\n" +
	"\x04Push\x12\x1d.ingest.v1.NormalizedLogBatch\x1a\x0e.ingest.v1.AckBBZ@github.com/kumarabd/ingestion-plane/contracts/ingest/v1;ingestv1b\x06proto3"

var (
	file_ingest_v1_ingest_proto_rawDescOnce sync.Once
	file_ingest_v1_ingest_proto_rawDescData []byte
)

func file_ingest_v1_ingest_proto_rawDescGZIP() []byte {
	file_ingest_v1_ingest_proto_rawDescOnce.Do(func() {
		file_ingest_v1_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ingest_v1_ingest_proto_rawDesc), len(file_ingest_v1_ingest_proto_rawDesc)))
	})
	return file_ingest_v1_ingest_proto_rawDescData
}

var file_ingest_v1_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ingest_v1_ingest_proto_goTypes = []any{
	(*NormalizedLog)(nil),         // 0: ingest.v1.NormalizedLog
	(*RedactionReport)(nil),       // 1: ingest.v1.RedactionReport
	(*NormalizedLogBatch)(nil),    // 2: ingest.v1.NormalizedLogBatch
	(*Ack)(nil),                   // 3: ingest.v1.Ack
	nil,                           // 4: ingest.v1.NormalizedLog.LabelsEntry
	nil,                           // 5: ingest.v1.NormalizedLog.FieldsEntry
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(v1.Schema)(0),                // 7: common.v1.Schema
	(v1.Severity)(0),              // 8: common.v1.Severity
}
var file_ingest_v1_ingest_proto_depIdxs = []int32{
	6, // 0: ingest.v1.NormalizedLog.timestamp:type_name -> google.protobuf.Timestamp
	4, // 1: ingest.v1.NormalizedLog.labels:type_name -> ingest.v1.NormalizedLog.LabelsEntry
	5, // 2: ingest.v1.NormalizedLog.fields:type_name -> ingest.v1.NormalizedLog.FieldsEntry
	7, // 3: ingest.v1.NormalizedLog.schema:type_name -> common.v1.Schema
	8, // 4: ingest.v1.NormalizedLog.severity:type_name -> common.v1.Severity
	1, // 5: ingest.v1.NormalizedLog.redaction:type_name -> ingest.v1.RedactionReport
	0, // 6: ingest.v1.NormalizedLogBatch.records:type_name -> ingest.v1.NormalizedLog
	2, // 7: ingest.v1.IngestService.Push:input_type -> ingest.v1.NormalizedLogBatch
	3, // 8: ingest.v1.IngestService.Push:output_type -> ingest.v1.Ack
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ingest_v1_ingest_proto_init() }
func file_ingest_v1_ingest_proto_init() {
	if File_ingest_v1_ingest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ingest_v1_ingest_proto_rawDesc), len(file_ingest_v1_ingest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ingest_v1_ingest_proto_goTypes,
		DependencyIndexes: file_ingest_v1_ingest_proto_depIdxs,
		MessageInfos:      file_ingest_v1_ingest_proto_msgTypes,
	}.Build()
	File_ingest_v1_ingest_proto = out.File
	file_ingest_v1_ingest_proto_goTypes = nil
	file_ingest_v1_ingest_proto_depIdxs = nil
}
