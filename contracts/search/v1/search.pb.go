// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: search/v1/search.proto

package searchv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Natural-language semantic query with optional filters.
type SemanticQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Query string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional label filters applied in vector/ANN stage (e.g., service, env).
	LabelFilter map[string]string `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional time range hint (for ranking / later LogQL windows).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Number of template hits to return (default server-side).
	TopK          uint32 `protobuf:"varint,5,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticQuery) Reset() {
	*x = SemanticQuery{}
	mi := &file_search_v1_search_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticQuery) ProtoMessage() {}

func (x *SemanticQuery) ProtoReflect() protoreflect.Message {
	mi := &file_search_v1_search_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticQuery.ProtoReflect.Descriptor instead.
func (*SemanticQuery) Descriptor() ([]byte, []int) {
	return file_search_v1_search_proto_rawDescGZIP(), []int{0}
}

func (x *SemanticQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SemanticQuery) GetLabelFilter() map[string]string {
	if x != nil {
		return x.LabelFilter
	}
	return nil
}

func (x *SemanticQuery) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SemanticQuery) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SemanticQuery) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

// Template hit returned by semantic search (not raw logs).
type TemplateHit struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TemplateId string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Template   string                 `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Regex      string                 `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
	// Metadata for filtering / UI.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Ranking score from ANN (higher is better).
	Score float32 `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	// Stats for context in the UI.
	Count_24H     uint64                 `protobuf:"varint,6,opt,name=count_24h,json=count24h,proto3" json:"count_24h,omitempty"`
	TsFirst       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ts_first,json=tsFirst,proto3" json:"ts_first,omitempty"`
	TsLast        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ts_last,json=tsLast,proto3" json:"ts_last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateHit) Reset() {
	*x = TemplateHit{}
	mi := &file_search_v1_search_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateHit) ProtoMessage() {}

func (x *TemplateHit) ProtoReflect() protoreflect.Message {
	mi := &file_search_v1_search_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateHit.ProtoReflect.Descriptor instead.
func (*TemplateHit) Descriptor() ([]byte, []int) {
	return file_search_v1_search_proto_rawDescGZIP(), []int{1}
}

func (x *TemplateHit) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TemplateHit) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TemplateHit) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *TemplateHit) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TemplateHit) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TemplateHit) GetCount_24H() uint64 {
	if x != nil {
		return x.Count_24H
	}
	return 0
}

func (x *TemplateHit) GetTsFirst() *timestamppb.Timestamp {
	if x != nil {
		return x.TsFirst
	}
	return nil
}

func (x *TemplateHit) GetTsLast() *timestamppb.Timestamp {
	if x != nil {
		return x.TsLast
	}
	return nil
}

// Search response.
type SearchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hits          []*TemplateHit         `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_search_v1_search_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_search_v1_search_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_search_v1_search_proto_rawDescGZIP(), []int{2}
}

func (x *SearchResponse) GetHits() []*TemplateHit {
	if x != nil {
		return x.Hits
	}
	return nil
}

// Planner input to request LogQL for selected templates (optional extra API).
type PlanRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Selected []*TemplateHit         `protobuf:"bytes,1,rep,name=selected,proto3" json:"selected,omitempty"`
	// Desired query time range.
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanRequest) Reset() {
	*x = PlanRequest{}
	mi := &file_search_v1_search_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRequest) ProtoMessage() {}

func (x *PlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_search_v1_search_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRequest.ProtoReflect.Descriptor instead.
func (*PlanRequest) Descriptor() ([]byte, []int) {
	return file_search_v1_search_proto_rawDescGZIP(), []int{3}
}

func (x *PlanRequest) GetSelected() []*TemplateHit {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *PlanRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PlanRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Planner returns candidate LogQL strings (the caller will run them against Loki).
type PlanResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LogqlCandidates []string               `protobuf:"bytes,1,rep,name=logql_candidates,json=logqlCandidates,proto3" json:"logql_candidates,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlanResponse) Reset() {
	*x = PlanResponse{}
	mi := &file_search_v1_search_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResponse) ProtoMessage() {}

func (x *PlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_search_v1_search_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResponse.ProtoReflect.Descriptor instead.
func (*PlanResponse) Descriptor() ([]byte, []int) {
	return file_search_v1_search_proto_rawDescGZIP(), []int{4}
}

func (x *PlanResponse) GetLogqlCandidates() []string {
	if x != nil {
		return x.LogqlCandidates
	}
	return nil
}

var File_search_v1_search_proto protoreflect.FileDescriptor

const file_search_v1_search_proto_rawDesc = "" +
	"\n" +
	"\x16search/v1/search.proto\x12\tsearch.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xba\x02\n" +
	"\rSemanticQuery\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12L\n" +
	"\flabel_filter\x18\x02 \x03(\v2).search.v1.SemanticQuery.LabelFilterEntryR\vlabelFilter\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x13\n" +
	"\x05top_k\x18\x05 \x01(\rR\x04topK\x1a>\n" +
	"\x10LabelFilterEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf6\x02\n" +
	"\vTemplateHit\x12\x1f\n" +
	"\vtemplate_id\x18\x01 \x01(\tR\n" +
	"templateId\x12\x1a\n" +
	"\btemplate\x18\x02 \x01(\tR\btemplate\x12\x14\n" +
	"\x05regex\x18\x03 \x01(\tR\x05regex\x12:\n" +
	"\x06labels\x18\x04 \x03(\v2\".search.v1.TemplateHit.LabelsEntryR\x06labels\x12\x14\n" +
	"\x05score\x18\x05 \x01(\x02R\x05score\x12\x1b\n" +
	"\tcount_24h\x18\x06 \x01(\x04R\bcount24h\x125\n" +
	"\bts_first\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\atsFirst\x123\n" +
	"\ats_last\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x06tsLast\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"<\n" +
	"\x0eSearchResponse\x12*\n" +
	"\x04hits\x18\x01 \x03(\v2\x16.search.v1.TemplateHitR\x04hits\"\xb3\x01\n" +
	"\vPlanRequest\x122\n" +
	"\bselected\x18\x01 \x03(\v2\x16.search.v1.TemplateHitR\bselected\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\"9\n" +
	"\fPlanResponse\x12)\n" +
	"\x10logql_candidates\x18\x01 \x03(\tR\x0flogqlCandidates2\x87\x01\n" +
	"\rSearchService\x12=\n" +
	"\x06Search\x12\x18.search.v1.SemanticQuery\x1a\x19.search.v1.SearchResponse\x127\n" +
	"\x04Plan\x12\x16.search.v1.PlanRequest\x1a\x17.search.v1.PlanResponseBBZ@github.com/kumarabd/ingestion-plane/contracts/search/v1;searchv1b\x06proto3"

var (
	file_search_v1_search_proto_rawDescOnce sync.Once
	file_search_v1_search_proto_rawDescData []byte
)

func file_search_v1_search_proto_rawDescGZIP() []byte {
	file_search_v1_search_proto_rawDescOnce.Do(func() {
		file_search_v1_search_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_search_v1_search_proto_rawDesc), len(file_search_v1_search_proto_rawDesc)))
	})
	return file_search_v1_search_proto_rawDescData
}

var file_search_v1_search_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_search_v1_search_proto_goTypes = []any{
	(*SemanticQuery)(nil),         // 0: search.v1.SemanticQuery
	(*TemplateHit)(nil),           // 1: search.v1.TemplateHit
	(*SearchResponse)(nil),        // 2: search.v1.SearchResponse
	(*PlanRequest)(nil),           // 3: search.v1.PlanRequest
	(*PlanResponse)(nil),          // 4: search.v1.PlanResponse
	nil,                           // 5: search.v1.SemanticQuery.LabelFilterEntry
	nil,                           // 6: search.v1.TemplateHit.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_search_v1_search_proto_depIdxs = []int32{
	5,  // 0: search.v1.SemanticQuery.label_filter:type_name -> search.v1.SemanticQuery.LabelFilterEntry
	7,  // 1: search.v1.SemanticQuery.start_time:type_name -> google.protobuf.Timestamp
	7,  // 2: search.v1.SemanticQuery.end_time:type_name -> google.protobuf.Timestamp
	6,  // 3: search.v1.TemplateHit.labels:type_name -> search.v1.TemplateHit.LabelsEntry
	7,  // 4: search.v1.TemplateHit.ts_first:type_name -> google.protobuf.Timestamp
	7,  // 5: search.v1.TemplateHit.ts_last:type_name -> google.protobuf.Timestamp
	1,  // 6: search.v1.SearchResponse.hits:type_name -> search.v1.TemplateHit
	1,  // 7: search.v1.PlanRequest.selected:type_name -> search.v1.TemplateHit
	7,  // 8: search.v1.PlanRequest.start_time:type_name -> google.protobuf.Timestamp
	7,  // 9: search.v1.PlanRequest.end_time:type_name -> google.protobuf.Timestamp
	0,  // 10: search.v1.SearchService.Search:input_type -> search.v1.SemanticQuery
	3,  // 11: search.v1.SearchService.Plan:input_type -> search.v1.PlanRequest
	2,  // 12: search.v1.SearchService.Search:output_type -> search.v1.SearchResponse
	4,  // 13: search.v1.SearchService.Plan:output_type -> search.v1.PlanResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_search_v1_search_proto_init() }
func file_search_v1_search_proto_init() {
	if File_search_v1_search_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_search_v1_search_proto_rawDesc), len(file_search_v1_search_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_search_v1_search_proto_goTypes,
		DependencyIndexes: file_search_v1_search_proto_depIdxs,
		MessageInfos:      file_search_v1_search_proto_msgTypes,
	}.Build()
	File_search_v1_search_proto = out.File
	file_search_v1_search_proto_goTypes = nil
	file_search_v1_search_proto_depIdxs = nil
}
