// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: sampler/v1/sampler.proto

package samplerv1

import (
	v1 "github.com/kumarabd/ingestion-plane/contracts/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Decision request combines miner output + key labels used for policy.
type DecisionRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Keyed labels used in policy decisions (e.g., service, env, severity, namespace).
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Template identity for this line.
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// Normalized severity also provided explicitly.
	Severity      v1.Severity `protobuf:"varint,4,opt,name=severity,proto3,enum=common.v1.Severity" json:"severity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecisionRequest) Reset() {
	*x = DecisionRequest{}
	mi := &file_sampler_v1_sampler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionRequest) ProtoMessage() {}

func (x *DecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sampler_v1_sampler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionRequest.ProtoReflect.Descriptor instead.
func (*DecisionRequest) Descriptor() ([]byte, []int) {
	return file_sampler_v1_sampler_proto_rawDescGZIP(), []int{0}
}

func (x *DecisionRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DecisionRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DecisionRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *DecisionRequest) GetSeverity() v1.Severity {
	if x != nil {
		return x.Severity
	}
	return v1.Severity(0)
}

// Decision result for a single line.
type Decision struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Action v1.Action              `protobuf:"varint,1,opt,name=action,proto3,enum=common.v1.Action" json:"action,omitempty"`
	// If kept, why it was kept (policy ladder reason).
	KeepReason v1.KeepReason `protobuf:"varint,2,opt,name=keep_reason,json=keepReason,proto3,enum=common.v1.KeepReason" json:"keep_reason,omitempty"`
	// Rolling counters (for transparency & UI).
	Counters *v1.WindowCounts `protobuf:"bytes,3,opt,name=counters,proto3" json:"counters,omitempty"`
	// Optional debug notes (not for hot path parsing).
	Note          string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decision) Reset() {
	*x = Decision{}
	mi := &file_sampler_v1_sampler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_sampler_v1_sampler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_sampler_v1_sampler_proto_rawDescGZIP(), []int{1}
}

func (x *Decision) GetAction() v1.Action {
	if x != nil {
		return x.Action
	}
	return v1.Action(0)
}

func (x *Decision) GetKeepReason() v1.KeepReason {
	if x != nil {
		return x.KeepReason
	}
	return v1.KeepReason(0)
}

func (x *Decision) GetCounters() *v1.WindowCounts {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Decision) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

// Batch version for throughput.
type DecisionBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*DecisionRequest     `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecisionBatchRequest) Reset() {
	*x = DecisionBatchRequest{}
	mi := &file_sampler_v1_sampler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecisionBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionBatchRequest) ProtoMessage() {}

func (x *DecisionBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sampler_v1_sampler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionBatchRequest.ProtoReflect.Descriptor instead.
func (*DecisionBatchRequest) Descriptor() ([]byte, []int) {
	return file_sampler_v1_sampler_proto_rawDescGZIP(), []int{2}
}

func (x *DecisionBatchRequest) GetItems() []*DecisionRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type DecisionBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Decision            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecisionBatchResponse) Reset() {
	*x = DecisionBatchResponse{}
	mi := &file_sampler_v1_sampler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecisionBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionBatchResponse) ProtoMessage() {}

func (x *DecisionBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sampler_v1_sampler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionBatchResponse.ProtoReflect.Descriptor instead.
func (*DecisionBatchResponse) Descriptor() ([]byte, []int) {
	return file_sampler_v1_sampler_proto_rawDescGZIP(), []int{3}
}

func (x *DecisionBatchResponse) GetItems() []*Decision {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_sampler_v1_sampler_proto protoreflect.FileDescriptor

const file_sampler_v1_sampler_proto_rawDesc = "" +
	"\n" +
	"\x18sampler/v1/sampler.proto\x12\n" +
	"sampler.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16common/v1/common.proto\"\x99\x02\n" +
	"\x0fDecisionRequest\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12?\n" +
	"\x06labels\x18\x02 \x03(\v2'.sampler.v1.DecisionRequest.LabelsEntryR\x06labels\x12\x1f\n" +
	"\vtemplate_id\x18\x03 \x01(\tR\n" +
	"templateId\x12/\n" +
	"\bseverity\x18\x04 \x01(\x0e2\x13.common.v1.SeverityR\bseverity\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb6\x01\n" +
	"\bDecision\x12)\n" +
	"\x06action\x18\x01 \x01(\x0e2\x11.common.v1.ActionR\x06action\x126\n" +
	"\vkeep_reason\x18\x02 \x01(\x0e2\x15.common.v1.KeepReasonR\n" +
	"keepReason\x123\n" +
	"\bcounters\x18\x03 \x01(\v2\x17.common.v1.WindowCountsR\bcounters\x12\x12\n" +
	"\x04note\x18\x04 \x01(\tR\x04note\"I\n" +
	"\x14DecisionBatchRequest\x121\n" +
	"\x05items\x18\x01 \x03(\v2\x1b.sampler.v1.DecisionRequestR\x05items\"C\n" +
	"\x15DecisionBatchResponse\x12*\n" +
	"\x05items\x18\x01 \x03(\v2\x14.sampler.v1.DecisionR\x05items2\xa4\x01\n" +
	"\x0eSamplerService\x12>\n" +
	"\tDecideOne\x12\x1b.sampler.v1.DecisionRequest\x1a\x14.sampler.v1.Decision\x12R\n" +
	"\vDecideBatch\x12 .sampler.v1.DecisionBatchRequest\x1a!.sampler.v1.DecisionBatchResponseBDZBgithub.com/kumarabd/ingestion-plane/contracts/sampler/v1;samplerv1b\x06proto3"

var (
	file_sampler_v1_sampler_proto_rawDescOnce sync.Once
	file_sampler_v1_sampler_proto_rawDescData []byte
)

func file_sampler_v1_sampler_proto_rawDescGZIP() []byte {
	file_sampler_v1_sampler_proto_rawDescOnce.Do(func() {
		file_sampler_v1_sampler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sampler_v1_sampler_proto_rawDesc), len(file_sampler_v1_sampler_proto_rawDesc)))
	})
	return file_sampler_v1_sampler_proto_rawDescData
}

var file_sampler_v1_sampler_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sampler_v1_sampler_proto_goTypes = []any{
	(*DecisionRequest)(nil),       // 0: sampler.v1.DecisionRequest
	(*Decision)(nil),              // 1: sampler.v1.Decision
	(*DecisionBatchRequest)(nil),  // 2: sampler.v1.DecisionBatchRequest
	(*DecisionBatchResponse)(nil), // 3: sampler.v1.DecisionBatchResponse
	nil,                           // 4: sampler.v1.DecisionRequest.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(v1.Severity)(0),              // 6: common.v1.Severity
	(v1.Action)(0),                // 7: common.v1.Action
	(v1.KeepReason)(0),            // 8: common.v1.KeepReason
	(*v1.WindowCounts)(nil),       // 9: common.v1.WindowCounts
}
var file_sampler_v1_sampler_proto_depIdxs = []int32{
	5,  // 0: sampler.v1.DecisionRequest.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 1: sampler.v1.DecisionRequest.labels:type_name -> sampler.v1.DecisionRequest.LabelsEntry
	6,  // 2: sampler.v1.DecisionRequest.severity:type_name -> common.v1.Severity
	7,  // 3: sampler.v1.Decision.action:type_name -> common.v1.Action
	8,  // 4: sampler.v1.Decision.keep_reason:type_name -> common.v1.KeepReason
	9,  // 5: sampler.v1.Decision.counters:type_name -> common.v1.WindowCounts
	0,  // 6: sampler.v1.DecisionBatchRequest.items:type_name -> sampler.v1.DecisionRequest
	1,  // 7: sampler.v1.DecisionBatchResponse.items:type_name -> sampler.v1.Decision
	0,  // 8: sampler.v1.SamplerService.DecideOne:input_type -> sampler.v1.DecisionRequest
	2,  // 9: sampler.v1.SamplerService.DecideBatch:input_type -> sampler.v1.DecisionBatchRequest
	1,  // 10: sampler.v1.SamplerService.DecideOne:output_type -> sampler.v1.Decision
	3,  // 11: sampler.v1.SamplerService.DecideBatch:output_type -> sampler.v1.DecisionBatchResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_sampler_v1_sampler_proto_init() }
func file_sampler_v1_sampler_proto_init() {
	if File_sampler_v1_sampler_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sampler_v1_sampler_proto_rawDesc), len(file_sampler_v1_sampler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sampler_v1_sampler_proto_goTypes,
		DependencyIndexes: file_sampler_v1_sampler_proto_depIdxs,
		MessageInfos:      file_sampler_v1_sampler_proto_msgTypes,
	}.Build()
	File_sampler_v1_sampler_proto = out.File
	file_sampler_v1_sampler_proto_goTypes = nil
	file_sampler_v1_sampler_proto_depIdxs = nil
}
