// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sampler/v1/sampler.proto

package samplerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SamplerService_DecideOne_FullMethodName   = "/sampler.v1.SamplerService/DecideOne"
	SamplerService_DecideBatch_FullMethodName = "/sampler.v1.SamplerService/DecideBatch"
)

// SamplerServiceClient is the client API for SamplerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sampler API - called by the gateway after mining.
type SamplerServiceClient interface {
	DecideOne(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*Decision, error)
	DecideBatch(ctx context.Context, in *DecisionBatchRequest, opts ...grpc.CallOption) (*DecisionBatchResponse, error)
}

type samplerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSamplerServiceClient(cc grpc.ClientConnInterface) SamplerServiceClient {
	return &samplerServiceClient{cc}
}

func (c *samplerServiceClient) DecideOne(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*Decision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Decision)
	err := c.cc.Invoke(ctx, SamplerService_DecideOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplerServiceClient) DecideBatch(ctx context.Context, in *DecisionBatchRequest, opts ...grpc.CallOption) (*DecisionBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecisionBatchResponse)
	err := c.cc.Invoke(ctx, SamplerService_DecideBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplerServiceServer is the server API for SamplerService service.
// All implementations must embed UnimplementedSamplerServiceServer
// for forward compatibility.
//
// Sampler API - called by the gateway after mining.
type SamplerServiceServer interface {
	DecideOne(context.Context, *DecisionRequest) (*Decision, error)
	DecideBatch(context.Context, *DecisionBatchRequest) (*DecisionBatchResponse, error)
	mustEmbedUnimplementedSamplerServiceServer()
}

// UnimplementedSamplerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSamplerServiceServer struct{}

func (UnimplementedSamplerServiceServer) DecideOne(context.Context, *DecisionRequest) (*Decision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideOne not implemented")
}
func (UnimplementedSamplerServiceServer) DecideBatch(context.Context, *DecisionBatchRequest) (*DecisionBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideBatch not implemented")
}
func (UnimplementedSamplerServiceServer) mustEmbedUnimplementedSamplerServiceServer() {}
func (UnimplementedSamplerServiceServer) testEmbeddedByValue()                        {}

// UnsafeSamplerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamplerServiceServer will
// result in compilation errors.
type UnsafeSamplerServiceServer interface {
	mustEmbedUnimplementedSamplerServiceServer()
}

func RegisterSamplerServiceServer(s grpc.ServiceRegistrar, srv SamplerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSamplerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SamplerService_ServiceDesc, srv)
}

func _SamplerService_DecideOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).DecideOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_DecideOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).DecideOne(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplerService_DecideBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).DecideBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_DecideBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).DecideBatch(ctx, req.(*DecisionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SamplerService_ServiceDesc is the grpc.ServiceDesc for SamplerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SamplerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sampler.v1.SamplerService",
	HandlerType: (*SamplerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecideOne",
			Handler:    _SamplerService_DecideOne_Handler,
		},
		{
			MethodName: "DecideBatch",
			Handler:    _SamplerService_DecideBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sampler/v1/sampler.proto",
}
