// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: miner/v1/miner.proto

package minerv1

import (
	v1 "github.com/kumarabd/ingestion-plane/contracts/ingest/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to analyze normalized logs (usually batched).
type AnalyzeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*v1.NormalizedLog    `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	mi := &file_miner_v1_miner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_miner_v1_miner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_miner_v1_miner_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeRequest) GetRecords() []*v1.NormalizedLog {
	if x != nil {
		return x.Records
	}
	return nil
}

// Result for each input record (1:1 alignment with request.records).
type TemplateResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stable identifier (hash of canonical template).
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// Canonical masked template text (post-PII redaction).
	Template string `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	// Pre-built regex derived from placeholders, for LogQL generation.
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
	// Optional group signature / bucket id (e.g., token-type sequence).
	GroupSignature string `protobuf:"bytes,4,opt,name=group_signature,json=groupSignature,proto3" json:"group_signature,omitempty"`
	// Confidence (0..1) for the assignment.
	Confidence float32 `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// First/last time we saw this template (as known by the miner).
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	// Optional bounded exemplars (very small).
	Examples      []string `protobuf:"bytes,8,rep,name=examples,proto3" json:"examples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateResult) Reset() {
	*x = TemplateResult{}
	mi := &file_miner_v1_miner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateResult) ProtoMessage() {}

func (x *TemplateResult) ProtoReflect() protoreflect.Message {
	mi := &file_miner_v1_miner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateResult.ProtoReflect.Descriptor instead.
func (*TemplateResult) Descriptor() ([]byte, []int) {
	return file_miner_v1_miner_proto_rawDescGZIP(), []int{1}
}

func (x *TemplateResult) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TemplateResult) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TemplateResult) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *TemplateResult) GetGroupSignature() string {
	if x != nil {
		return x.GroupSignature
	}
	return ""
}

func (x *TemplateResult) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *TemplateResult) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *TemplateResult) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *TemplateResult) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

// Batch response; results[i] corresponds to request.records[i].
type AnalyzeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*TemplateResult      `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	mi := &file_miner_v1_miner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_miner_v1_miner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_miner_v1_miner_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeResponse) GetResults() []*TemplateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_miner_v1_miner_proto protoreflect.FileDescriptor

const file_miner_v1_miner_proto_rawDesc = "" +
	"\n" +
	"\x14miner/v1/miner.proto\x12\bminer.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16ingest/v1/ingest.proto\"D\n" +
	"\x0eAnalyzeRequest\x122\n" +
	"\arecords\x18\x01 \x03(\v2\x18.ingest.v1.NormalizedLogR\arecords\"\xbc\x02\n" +
	"\x0eTemplateResult\x12\x1f\n" +
	"\vtemplate_id\x18\x01 \x01(\tR\n" +
	"templateId\x12\x1a\n" +
	"\btemplate\x18\x02 \x01(\tR\btemplate\x12\x14\n" +
	"\x05regex\x18\x03 \x01(\tR\x05regex\x12'\n" +
	"\x0fgroup_signature\x18\x04 \x01(\tR\x0egroupSignature\x12\x1e\n" +
	"\n" +
	"confidence\x18\x05 \x01(\x02R\n" +
	"confidence\x129\n" +
	"\n" +
	"first_seen\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tfirstSeen\x127\n" +
	"\tlast_seen\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\blastSeen\x12\x1a\n" +
	"\bexamples\x18\b \x03(\tR\bexamples\"E\n" +
	"\x0fAnalyzeResponse\x122\n" +
	"\aresults\x18\x01 \x03(\v2\x18.miner.v1.TemplateResultR\aresults2N\n" +
	"\fMinerService\x12>\n" +
	"\aAnalyze\x12\x18.miner.v1.AnalyzeRequest\x1a\x19.miner.v1.AnalyzeResponseB@Z>github.com/kumarabd/ingestion-plane/contracts/miner/v1;minerv1b\x06proto3"

var (
	file_miner_v1_miner_proto_rawDescOnce sync.Once
	file_miner_v1_miner_proto_rawDescData []byte
)

func file_miner_v1_miner_proto_rawDescGZIP() []byte {
	file_miner_v1_miner_proto_rawDescOnce.Do(func() {
		file_miner_v1_miner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_miner_v1_miner_proto_rawDesc), len(file_miner_v1_miner_proto_rawDesc)))
	})
	return file_miner_v1_miner_proto_rawDescData
}

var file_miner_v1_miner_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_miner_v1_miner_proto_goTypes = []any{
	(*AnalyzeRequest)(nil),        // 0: miner.v1.AnalyzeRequest
	(*TemplateResult)(nil),        // 1: miner.v1.TemplateResult
	(*AnalyzeResponse)(nil),       // 2: miner.v1.AnalyzeResponse
	(*v1.NormalizedLog)(nil),      // 3: ingest.v1.NormalizedLog
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_miner_v1_miner_proto_depIdxs = []int32{
	3, // 0: miner.v1.AnalyzeRequest.records:type_name -> ingest.v1.NormalizedLog
	4, // 1: miner.v1.TemplateResult.first_seen:type_name -> google.protobuf.Timestamp
	4, // 2: miner.v1.TemplateResult.last_seen:type_name -> google.protobuf.Timestamp
	1, // 3: miner.v1.AnalyzeResponse.results:type_name -> miner.v1.TemplateResult
	0, // 4: miner.v1.MinerService.Analyze:input_type -> miner.v1.AnalyzeRequest
	2, // 5: miner.v1.MinerService.Analyze:output_type -> miner.v1.AnalyzeResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_miner_v1_miner_proto_init() }
func file_miner_v1_miner_proto_init() {
	if File_miner_v1_miner_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_miner_v1_miner_proto_rawDesc), len(file_miner_v1_miner_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_miner_v1_miner_proto_goTypes,
		DependencyIndexes: file_miner_v1_miner_proto_depIdxs,
		MessageInfos:      file_miner_v1_miner_proto_msgTypes,
	}.Build()
	File_miner_v1_miner_proto = out.File
	file_miner_v1_miner_proto_goTypes = nil
	file_miner_v1_miner_proto_depIdxs = nil
}
