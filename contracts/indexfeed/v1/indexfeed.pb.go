// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: indexfeed/v1/indexfeed.proto

package indexfeedv1

import (
	v1 "github.com/kumarabd/ingestion-plane/contracts/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Stats block carried with template events.
type TemplateStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Windows       *v1.WindowCounts       `protobuf:"bytes,1,opt,name=windows,proto3" json:"windows,omitempty"`
	FirstSeen     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateStats) Reset() {
	*x = TemplateStats{}
	mi := &file_indexfeed_v1_indexfeed_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateStats) ProtoMessage() {}

func (x *TemplateStats) ProtoReflect() protoreflect.Message {
	mi := &file_indexfeed_v1_indexfeed_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateStats.ProtoReflect.Descriptor instead.
func (*TemplateStats) Descriptor() ([]byte, []int) {
	return file_indexfeed_v1_indexfeed_proto_rawDescGZIP(), []int{0}
}

func (x *TemplateStats) GetWindows() *v1.WindowCounts {
	if x != nil {
		return x.Windows
	}
	return nil
}

func (x *TemplateStats) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *TemplateStats) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

// Simple anomaly payload for spike events.
type Anomaly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Window        string                 `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`                                // e.g., "10m" or "1h"
	BaselineP95   float64                `protobuf:"fixed64,2,opt,name=baseline_p95,json=baselineP95,proto3" json:"baseline_p95,omitempty"` // baseline rate
	CurrentRate   float64                `protobuf:"fixed64,3,opt,name=current_rate,json=currentRate,proto3" json:"current_rate,omitempty"` // observed
	SpikeFactor   float64                `protobuf:"fixed64,4,opt,name=spike_factor,json=spikeFactor,proto3" json:"spike_factor,omitempty"` // current / baseline
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Anomaly) Reset() {
	*x = Anomaly{}
	mi := &file_indexfeed_v1_indexfeed_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Anomaly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anomaly) ProtoMessage() {}

func (x *Anomaly) ProtoReflect() protoreflect.Message {
	mi := &file_indexfeed_v1_indexfeed_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anomaly.ProtoReflect.Descriptor instead.
func (*Anomaly) Descriptor() ([]byte, []int) {
	return file_indexfeed_v1_indexfeed_proto_rawDescGZIP(), []int{1}
}

func (x *Anomaly) GetWindow() string {
	if x != nil {
		return x.Window
	}
	return ""
}

func (x *Anomaly) GetBaselineP95() float64 {
	if x != nil {
		return x.BaselineP95
	}
	return 0
}

func (x *Anomaly) GetCurrentRate() float64 {
	if x != nil {
		return x.CurrentRate
	}
	return 0
}

func (x *Anomaly) GetSpikeFactor() float64 {
	if x != nil {
		return x.SpikeFactor
	}
	return 0
}

// Event published to the index-feed (Kafka/Redpanda/OTLP).
type TemplateEvent struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Type       v1.TemplateEventType   `protobuf:"varint,1,opt,name=type,proto3,enum=common.v1.TemplateEventType" json:"type,omitempty"`
	TemplateId string                 `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Template   string                 `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	Regex      string                 `protobuf:"bytes,4,opt,name=regex,proto3" json:"regex,omitempty"`
	// Minimal labels for filtering in the semantic index.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Usage stats for ranking/aging.
	Stats *TemplateStats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	// Optional bounded exemplars (masked).
	Examples []*v1.Exemplar `protobuf:"bytes,7,rep,name=examples,proto3" json:"examples,omitempty"`
	// Present for TEMPLATE_SPIKE events.
	Anomaly *Anomaly `protobuf:"bytes,8,opt,name=anomaly,proto3" json:"anomaly,omitempty"`
	// Idempotency key for de-dupe on the consumer side.
	EventId       string `protobuf:"bytes,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateEvent) Reset() {
	*x = TemplateEvent{}
	mi := &file_indexfeed_v1_indexfeed_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateEvent) ProtoMessage() {}

func (x *TemplateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_indexfeed_v1_indexfeed_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateEvent.ProtoReflect.Descriptor instead.
func (*TemplateEvent) Descriptor() ([]byte, []int) {
	return file_indexfeed_v1_indexfeed_proto_rawDescGZIP(), []int{2}
}

func (x *TemplateEvent) GetType() v1.TemplateEventType {
	if x != nil {
		return x.Type
	}
	return v1.TemplateEventType(0)
}

func (x *TemplateEvent) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TemplateEvent) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TemplateEvent) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *TemplateEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TemplateEvent) GetStats() *TemplateStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TemplateEvent) GetExamples() []*v1.Exemplar {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *TemplateEvent) GetAnomaly() *Anomaly {
	if x != nil {
		return x.Anomaly
	}
	return nil
}

func (x *TemplateEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

var File_indexfeed_v1_indexfeed_proto protoreflect.FileDescriptor

const file_indexfeed_v1_indexfeed_proto_rawDesc = "" +
	"\n" +
	"\x1cindexfeed/v1/indexfeed.proto\x12\findexfeed.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16common/v1/common.proto\"\xb6\x01\n" +
	"\rTemplateStats\x121\n" +
	"\awindows\x18\x01 \x01(\v2\x17.common.v1.WindowCountsR\awindows\x129\n" +
	"\n" +
	"first_seen\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tfirstSeen\x127\n" +
	"\tlast_seen\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\blastSeen\"\x8a\x01\n" +
	"\aAnomaly\x12\x16\n" +
	"\x06window\x18\x01 \x01(\tR\x06window\x12!\n" +
	"\fbaseline_p95\x18\x02 \x01(\x01R\vbaselineP95\x12!\n" +
	"\fcurrent_rate\x18\x03 \x01(\x01R\vcurrentRate\x12!\n" +
	"\fspike_factor\x18\x04 \x01(\x01R\vspikeFactor\"\xc0\x03\n" +
	"\rTemplateEvent\x120\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1c.common.v1.TemplateEventTypeR\x04type\x12\x1f\n" +
	"\vtemplate_id\x18\x02 \x01(\tR\n" +
	"templateId\x12\x1a\n" +
	"\btemplate\x18\x03 \x01(\tR\btemplate\x12\x14\n" +
	"\x05regex\x18\x04 \x01(\tR\x05regex\x12?\n" +
	"\x06labels\x18\x05 \x03(\v2'.indexfeed.v1.TemplateEvent.LabelsEntryR\x06labels\x121\n" +
	"\x05stats\x18\x06 \x01(\v2\x1b.indexfeed.v1.TemplateStatsR\x05stats\x12/\n" +
	"\bexamples\x18\a \x03(\v2\x13.common.v1.ExemplarR\bexamples\x12/\n" +
	"\aanomaly\x18\b \x01(\v2\x15.indexfeed.v1.AnomalyR\aanomaly\x12\x19\n" +
	"\bevent_id\x18\t \x01(\tR\aeventId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01BHZFgithub.com/kumarabd/ingestion-plane/contracts/indexfeed/v1;indexfeedv1b\x06proto3"

var (
	file_indexfeed_v1_indexfeed_proto_rawDescOnce sync.Once
	file_indexfeed_v1_indexfeed_proto_rawDescData []byte
)

func file_indexfeed_v1_indexfeed_proto_rawDescGZIP() []byte {
	file_indexfeed_v1_indexfeed_proto_rawDescOnce.Do(func() {
		file_indexfeed_v1_indexfeed_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_indexfeed_v1_indexfeed_proto_rawDesc), len(file_indexfeed_v1_indexfeed_proto_rawDesc)))
	})
	return file_indexfeed_v1_indexfeed_proto_rawDescData
}

var file_indexfeed_v1_indexfeed_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_indexfeed_v1_indexfeed_proto_goTypes = []any{
	(*TemplateStats)(nil),         // 0: indexfeed.v1.TemplateStats
	(*Anomaly)(nil),               // 1: indexfeed.v1.Anomaly
	(*TemplateEvent)(nil),         // 2: indexfeed.v1.TemplateEvent
	nil,                           // 3: indexfeed.v1.TemplateEvent.LabelsEntry
	(*v1.WindowCounts)(nil),       // 4: common.v1.WindowCounts
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(v1.TemplateEventType)(0),     // 6: common.v1.TemplateEventType
	(*v1.Exemplar)(nil),           // 7: common.v1.Exemplar
}
var file_indexfeed_v1_indexfeed_proto_depIdxs = []int32{
	4, // 0: indexfeed.v1.TemplateStats.windows:type_name -> common.v1.WindowCounts
	5, // 1: indexfeed.v1.TemplateStats.first_seen:type_name -> google.protobuf.Timestamp
	5, // 2: indexfeed.v1.TemplateStats.last_seen:type_name -> google.protobuf.Timestamp
	6, // 3: indexfeed.v1.TemplateEvent.type:type_name -> common.v1.TemplateEventType
	3, // 4: indexfeed.v1.TemplateEvent.labels:type_name -> indexfeed.v1.TemplateEvent.LabelsEntry
	0, // 5: indexfeed.v1.TemplateEvent.stats:type_name -> indexfeed.v1.TemplateStats
	7, // 6: indexfeed.v1.TemplateEvent.examples:type_name -> common.v1.Exemplar
	1, // 7: indexfeed.v1.TemplateEvent.anomaly:type_name -> indexfeed.v1.Anomaly
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_indexfeed_v1_indexfeed_proto_init() }
func file_indexfeed_v1_indexfeed_proto_init() {
	if File_indexfeed_v1_indexfeed_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_indexfeed_v1_indexfeed_proto_rawDesc), len(file_indexfeed_v1_indexfeed_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indexfeed_v1_indexfeed_proto_goTypes,
		DependencyIndexes: file_indexfeed_v1_indexfeed_proto_depIdxs,
		MessageInfos:      file_indexfeed_v1_indexfeed_proto_msgTypes,
	}.Build()
	File_indexfeed_v1_indexfeed_proto = out.File
	file_indexfeed_v1_indexfeed_proto_goTypes = nil
	file_indexfeed_v1_indexfeed_proto_depIdxs = nil
}
